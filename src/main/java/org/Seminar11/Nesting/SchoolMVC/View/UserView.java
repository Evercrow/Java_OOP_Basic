package org.Seminar11.Nesting.SchoolMVC.View;


// S - работу с ID можно вынести в другой класс
// O - вывод в строку достаточно универсален, когда на вход БД коллекцией, а на выход строка.
// НО нужно сделать форматирование строки через отдельные сущности для более простого изменения.
// L - если будем создавать иерархию форматировщиков, то следим за входами-выходами методов
// I - опять, паттерн MVC немного снимает релевантность данного принципа.
// Но если мы будем делать наследников по отдельным типам просмотров, то интерфейсы в них будем подключать только необходимые
// D - класс завязан только на абстрактного User, принцип выполняется.
// В groupView нужны обобщения, но это все равно лучше сделать в отдельном классе по принципу S
public abstract class UserView {

    //абстракиия класса для реализации принципа O. Его будут дополнять наследники под разные типы форматирования

}
